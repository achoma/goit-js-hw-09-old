{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAkBpC,SAASC,EAAeC,EAAQC,EAAOC,EAAMC,EAAW,GACtD,GAAIA,GAAYH,EAAQ,EAkBHI,EAhBLD,EAgBeE,EAjBRJ,GAASE,EAAW,GAAKD,EAkBzC,IAAII,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,KAxBNO,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MACjBQ,EAAAnB,GAASoB,OAAOC,QACd,uBAAqBX,QAAiBC,OAExCN,EAAeC,EAAQK,EAAOH,EAAME,EAAW,EAAE,IAElDY,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClBQ,EAAAnB,GAASoB,OAAOG,QACd,sBAAoBb,QAAeC,OAErCN,EAAeC,EAAQK,EAAOH,EAAME,EAAW,EAAE,G,CAKzD,IAAuBA,EAAUC,C,CAnCjCQ,EAAAnB,GAASoB,OAAOI,KAAK,CACnBC,MAAO,QACPf,SAAU,YACVgB,QAAS,OAGXxB,EAAKyB,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,MAAMlB,EAAQmB,SAAS5B,EAAK6B,SAASpB,MAAMqB,OACrCxB,EAAOsB,SAAS5B,EAAK6B,SAASvB,KAAKwB,OAGzC3B,EAFeyB,SAAS5B,EAAK6B,SAASzB,OAAO0B,OAEtBrB,EAAOH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nNotiflix.Notify.init({\n  width: '300px',\n  position: 'right-top',\n  timeout: 3500,\n});\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  createPromises(amount, delay, step);\n});\n\nfunction createPromises(amount, delay, step, position = 1) {\n  if (position <= amount) {\n    const currentDelay = delay + (position - 1) * step;\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        createPromises(amount, delay, step, position + 1);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        createPromises(amount, delay, step, position + 1);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromises","amount","delay1","step","position1","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","$parcel$interopDefault","Notify","success","catch","failure","init","width","timeout","addEventListener","event","preventDefault","parseInt","elements","value"],"version":3,"file":"03-promises.d5fc25d0.js.map"}